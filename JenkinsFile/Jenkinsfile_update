pipeline {
    agent any
    
    environment {
        DOCKER_VERSION_TAG = getVersion()
        AWS_DEFAULT_REGION="eu-central-1"
    }

    stages {
        stage('git') {
            steps {
                git branch: 'main', credentialsId: 'git_ssh', url: 'git@github.com:tsv1982/petclinic.git'
            }
        }

         stage('Build A') {
                    steps {
                            build job: "petclinic_build", wait: true
                }
        }
               
        stage('build'){
            steps {  
                sh "./mvnw package" 
           }
        }
          stage('docker build'){
            steps {
                  sh 'docker image build . -t tsv1982/petclinic_01:${DOCKER_VERSION_TAG} -t tsv1982/petclinic_01:latest'
            }
        }
        stage('Docker push'){
            steps {
                 echo "${DOCKER_VERSION_TAG}"
                 withCredentials([string(credentialsId: 'docker_pas', variable: 'dockerHab_pas')]) {
                     sh "docker login -u tsv1982 -p ${dockerHab_pas}"
                 }
                 sh 'docker push tsv1982/petclinic_01:${DOCKER_VERSION_TAG}'
                 sh 'docker push tsv1982/petclinic_01:latest'
            }
        }        
        stage('ecs update'){
            steps {
              withCredentials([string(credentialsId: 'Access_key_ID', variable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'Secret_access_key', variable: 
              'AWS_SECRET_ACCESS_KEY')]) {
                   sh 'aws ecs update-service --cluster petclinic_ecs_cluster --service petclinic_service --task-definition petclinic_task_definition --force-new-deployment'
             }
           }
        }
        
    }
   
}

def getVersion(){
    def commitHash = sh label: '', returnStdout: true, script: 'git rev-parse --short HEAD'
    return commitHash
}
